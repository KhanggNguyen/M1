----QUIT----2019-03-15T14:54:38.352971+01:00 Pharo7.0-SNAPSHOT-32bit-9f17218.image priorSource: 0!----QUIT----2019-03-15T14:54:52.90449+01:00 Pharo7.0-SNAPSHOT-32bit-9f17218.image priorSource: 0!Object subclass: #Account	instanceVariableNames: 'solde'	classVariableNames: 'soldeDefaut'	poolDictionaries: ''	category: 'HLIN603'!!Account methodsFor: 'actions api' stamp: 'Khang 3/22/2019 10:00'!get 	^(solde).! !!Account methodsFor: 'comparing' stamp: 'Khang 3/22/2019 10:32'!= anObject 	"Answer whether the receiver and the argument represent the same 	object. If = is redefined in any subclass, consider also redefining the 	message hash."	"^solde = anObject get" 	^solde = anObject instVarAt: 1. "on acc√©de √† la 1er variable de class"! !!Account methodsFor: 'printing' stamp: 'Khang 3/22/2019 10:01'!printOn: aStreamaStream nextPutAll: 'un ' , self class name , ' de solde : ' .solde printOn: aStream.! !!Account methodsFor: 'initialization' stamp: 'Khang 3/22/2019 09:55'!initialize: somme	solde := somme.	! !!Account methodsFor: 'initialization' stamp: 'Khang 3/22/2019 09:56'!initialize	solde := 0.		! !!Account methodsFor: 'as yet unclassified' stamp: 'Khang 3/22/2019 10:06'!deposit: somme	solde := solde + somme.	! !!Account methodsFor: 'as yet unclassified' stamp: 'Khang 3/22/2019 10:04'!withdraw: somme	solde := solde - somme.	"(solde >= somme)	ifTrue: [ solde := solde - somme ]	ifFalse: [ self error: 'Le solde nest pas suffisant.' ]."	! !Object subclass: #Bank	instanceVariableNames: 'comptes'	classVariableNames: ''	poolDictionaries: ''	category: 'HLIN603'!!Bank methodsFor: 'initialization' stamp: 'Khang 3/22/2019 11:08'!initialize	comptes := OrderedCollection new.	! !!Bank methodsFor: 'as yet unclassified' stamp: 'Khang 3/22/2019 11:11'!deposit: n	comptes do: [ :each | each deposit: n].! !!Bank methodsFor: 'as yet unclassified' stamp: 'Khang 3/22/2019 11:12'!balance	| somme |	somme := 0.	comptes do: [ :each | somme := somme + each get ].	^(somme).		! !!Bank methodsFor: 'printing' stamp: 'Khang 3/22/2019 11:17'!printOn: aStream	| balance |	aStream nextPutAll: 'le Solde des compte : '.	balance := balance.	balance printOn: aStream.  ! !!Bank methodsFor: 'adding' stamp: 'Khang 3/22/2019 11:09'!add: compte	comptes add: compte.	! !Object subclass: #Bonbons	instanceVariableNames: 'colonne taille contenu'	classVariableNames: ''	poolDictionaries: ''	category: 'HLIN603'!!Bonbons methodsFor: 'as yet unclassified' stamp: 'nguyen 3/15/2019 11:41'!colonnes: c taille: t	| p |	contenu := Array new: c.	p := Pile new. 	p initialize: t.	1 to: c do: [		:i | contenu at: i put: p  	]! !!Bonbons methodsFor: 'as yet unclassified' stamp: 'nguyen 3/15/2019 12:22'!donner: i	| e |	e := contenu at: i.	e isEmpty		ifTrue: [ e error: #Yenaplus ]		ifFalse: [ e pop. ]! !!Bonbons methodsFor: 'as yet unclassified' stamp: 'nguyen 3/15/2019 12:21'!remplir: i avec: c	| p |	p := contenu at: i.	p push: c.	p push: c.	p push: c.	p push: c.	p push: c.! !Bonbons subclass: #Carambar	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'HLIN603'!Account subclass: #InterestAccount	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'HLIN603'!!InterestAccount methodsFor: 'as yet unclassified' stamp: 'Khang 3/22/2019 10:39'!depositInterest: n	solde := solde + n*0.05.! !!InterestAccount methodsFor: 'as yet unclassified' stamp: 'Khang 3/22/2019 10:22'!deposit: somme	super deposit: somme.	self depositInterest: somme.! !Bonbons subclass: #Malabar	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'HLIN603'!Object subclass: #Pile	instanceVariableNames: 'contenu index capacite'	classVariableNames: 'tailleDefaut'	poolDictionaries: ''	category: 'HLIN603'!!Pile methodsFor: 'testing' stamp: 'nguyen 3/15/2019 10:18'!isFull.	^(capacite = index)! !!Pile methodsFor: 'printing' stamp: 'nguyen 3/15/2019 10:32'!printOn: aStream	aStream nextPutAll: 'une Pile, de taille: '.	capacite printOn: aStream.	aStream nextPutAll: ' contenant: '.	index printOn: aStream.	aStream nextPutAll:  'objets : ('.	contenu do: [ :each | each printOn: aStream. aStream space ].	aStream nextPut: $).	aStream nextPut: $..! !!Pile methodsFor: 'removing' stamp: 'nguyen 3/15/2019 12:19'!pop	| retour |	self isEmpty	ifFalse: [ 		contenu at: index put: nil.		contenu at: (index).		index := index - 1.		retour := contenu.		^retour. ]			ifTrue: [ self error: 'Pile Vide' ]! !!Pile methodsFor: 'accessing' stamp: 'nguyen 3/15/2019 11:04'!top 	self isEmpty	ifFalse: [ 		^contenu at: 1		 ]	ifTrue: [ self error: 'Pile vide' ]! !!Pile methodsFor: 'initialization' stamp: 'Anonymous 3/22/2019 08:30'!initialize: taille	index := 0.	capacite := taille.	contenu := Array new: capacite.! !!Pile methodsFor: 'initialization' stamp: 'nguyen 3/15/2019 10:09'!isEmpty 	 ^(index = 0)! !!Pile methodsFor: 'adding' stamp: 'nguyen 3/15/2019 10:38'!push: unobjet	self isFull		ifTrue: [ self error: 'Plein' ]		ifFalse: [ index := index + 1.	contenu at: index put: unobjet. ]		! !Account subclass: #SecureAccount	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'HLIN603'!!SecureAccount methodsFor: 'as yet unclassified' stamp: 'Khang 3/22/2019 10:34'!withdraw: somme	(solde >= somme)	ifTrue: [ solde := solde - somme ]	ifFalse: [ self error: 'La solde nest pas suffisant.' ].	! !TestCase subclass: #TestPile	instanceVariableNames: 'standard pleine vide'	classVariableNames: ''	poolDictionaries: ''	category: 'HLIN603'!!TestPile methodsFor: 'tests' stamp: 'Khang 3/22/2019 09:23'!testEquals	self assert: standard = standard.! !!TestPile methodsFor: 'tests' stamp: 'Khang 3/22/2019 09:24'!testEqual 	| copy |	copy := standard shallowCopy.	"self assert: standard equals: copy."	self assert: true.! !!TestPile methodsFor: 'tests' stamp: 'Khang 3/22/2019 09:00'!testEmpty.	self assert: (pleine isEmpty not).	self assert: (standard isEmpty not).	self assert: (vide isEmpty).! !!TestPile methodsFor: 'tests' stamp: 'Khang 3/22/2019 09:19'!testPop.	standard pop.	pleine pop.	self assert: standard isEmpty.	self assert: pleine isFull not.		! !!TestPile methodsFor: 'tests' stamp: 'Khang 3/22/2019 09:03'!testFull	self assert: (pleine isFull).	self assert: (vide isFull not).	self assert: (standard isFull not).! !!TestPile methodsFor: 'running' stamp: 'Khang 3/22/2019 09:00'!setUp	pleine := Pile new initialize: 3. 	pleine push: 1.	pleine push: 2.	pleine push: 3.	standard := Pile new initialize: 3.	standard push: 1. 	vide := Pile new initialize: 3.! !----End fileIn----!Object subclass: #Exemple	instanceVariableNames: ''	classVariableNames: ''	package: 'HLIN603'!Smalltalk globals removeClassNamed: #AnObsoleteExemple!!Bank methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 08:46'!example	"Une méthode de classe de la classe Bank"	"Bank example" "Selectionnez le commentaire precedent puis doIt"	| b |	b := self new initialize.	b add: (SecureAccount new: 200). "pourquoi les parenthèses ?"	b add: InterestAccount new.	b add: (SecureAccount new: 150).	b deposit: 100.	^b! !!Bank methodsFor: 'example' stamp: 'Khang 3/29/2019 09:00' prior: 33561436!example	"Une méthode de classe de la classe Bank"	"Bank example" "Selectionnez le commentaire precedent puis doIt"	| b |	b := self new initialize.	b add: (SecureAccount new: 200). "pourquoi les parenthèses ?"	b add: InterestAccount new.	b add: (SecureAccount new: 150).	b deposit: 100.	^b! !Bank removeSelector: #example!!Bank class methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 09:02'!example	"Une méthode de classe de la classe Bank"	"Bank example" "Selectionnez le commentaire precedent puis doIt"	| b |	b := self new initialize.	b add: (SecureAccount new: 200). "pourquoi les parenthèses ?"	b add: InterestAccount new.	b add: (SecureAccount new: 150).	b deposit: 100.	^b! !!SecureAccount methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 09:05'!initialize: s.		! !!SecureAccount methodsFor: 'initialization' stamp: 'Khang 3/29/2019 09:05' prior: 33562612!initialize: s.	solde = s.	! !!Account class methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 09:07'!initialize	self solde 		! !Account subclass: #SecureAccount	instanceVariableNames: 'Solde'	classVariableNames: ''	package: 'HLIN603'!SecureAccount removeSelector: #initialize:!!Account class methodsFor: 'class initialization' stamp: 'Khang 3/29/2019 09:19'!new: val	 ^super new initialize deposit: 500.! !Account class removeSelector: #initialize!!Account class methodsFor: 'class initialization' stamp: 'Khang 3/29/2019 09:19' prior: 33563108!new: val	 ^super new initialize deposit: val.! !!Account class methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 09:21'!new 	^super new initialize: 0.! !!Account methodsFor: 'initialization' stamp: 'Khang 3/29/2019 09:23' prior: 33555552!initialize	self deposit: 0.		! !!Account methodsFor: 'initialization' stamp: 'Khang 3/29/2019 09:24' prior: 33555442!initialize: somme	self deposit: somme.	! !!Account class methodsFor: 'instance creation' stamp: 'Khang 3/29/2019 09:24' prior: 33563431!new 	^super new initialize deposit: 0.! !!Bank class methodsFor: 'example' stamp: 'Khang 3/29/2019 09:27' prior: 33562228!example	"Une méthode de classe de la classe Bank"	"Bank example" "Selectionnez le commentaire precedent puis doIt"	| b |	b := self new initialize.	b add: (SecureAccount new: 200). "pourquoi les parenthèses ?"	b add: InterestAccount new.	b add: (SecureAccount new: 150).	b deposit: 100.	^b! !!Account methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 09:28' prior: 33555658!deposit: somme	self deposit: solde + somme.	! !!Account methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 09:29' prior: 33564333!deposit: somme	| total |	total := solde + somme.	self deposit: total.	! !!Account methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 09:31' prior: 33564474!deposit: somme	| total |	total := [solde + somme].	self deposit: total.	! !Object subclass: #Account	instanceVariableNames: 'solde'	classVariableNames: 'soldeDefaut'	poolDictionaries: ''	category: 'HLIN603'!!Account methodsFor: 'actions api' stamp: 'Khang 3/22/2019 10:00'!get 	^(solde).! !!Account methodsFor: 'comparing' stamp: 'Khang 3/22/2019 10:32'!= anObject 	"Answer whether the receiver and the argument represent the same 	object. If = is redefined in any subclass, consider also redefining the 	message hash."	"^solde = anObject get" 	^solde = anObject instVarAt: 1. "on acc√©de √† la 1er variable de class"! !!Account methodsFor: 'printing' stamp: 'Khang 3/22/2019 10:01'!printOn: aStreamaStream nextPutAll: 'un ' , self class name , ' de solde : ' .solde printOn: aStream.! !!Account methodsFor: 'initialization' stamp: 'Khang 3/22/2019 09:55'!initialize: somme	solde := somme.	! !!Account methodsFor: 'initialization' stamp: 'Khang 3/22/2019 09:56'!initialize	solde := 0.		! !!Account methodsFor: 'as yet unclassified' stamp: 'Khang 3/22/2019 10:06'!deposit: somme	solde := solde + somme.	! !!Account methodsFor: 'as yet unclassified' stamp: 'Khang 3/22/2019 10:04'!withdraw: somme	solde := solde - somme.	"(solde >= somme)	ifTrue: [ solde := solde - somme ]	ifFalse: [ self error: 'Le solde nest pas suffisant.' ]."	! !Object subclass: #Bank	instanceVariableNames: 'comptes'	classVariableNames: ''	poolDictionaries: ''	category: 'HLIN603'!!Bank methodsFor: 'initialization' stamp: 'Khang 3/22/2019 11:08'!initialize	comptes := OrderedCollection new.	! !!Bank methodsFor: 'as yet unclassified' stamp: 'Khang 3/22/2019 11:11'!deposit: n	comptes do: [ :each | each deposit: n].! !!Bank methodsFor: 'as yet unclassified' stamp: 'Khang 3/22/2019 11:12'!balance	| somme |	somme := 0.	comptes do: [ :each | somme := somme + each get ].	^(somme).		! !!Bank methodsFor: 'printing' stamp: 'Khang 3/22/2019 11:17'!printOn: aStream	| balance |	aStream nextPutAll: 'le Solde des compte : '.	balance := balance.	balance printOn: aStream.  ! !!Bank methodsFor: 'adding' stamp: 'Khang 3/22/2019 11:09'!add: compte	comptes add: compte.	! !Object subclass: #Bonbons	instanceVariableNames: 'colonne taille contenu'	classVariableNames: ''	poolDictionaries: ''	category: 'HLIN603'!!Bonbons methodsFor: 'as yet unclassified' stamp: 'nguyen 3/15/2019 11:41'!colonnes: c taille: t	| p |	contenu := Array new: c.	p := Pile new. 	p initialize: t.	1 to: c do: [		:i | contenu at: i put: p  	]! !!Bonbons methodsFor: 'as yet unclassified' stamp: 'nguyen 3/15/2019 12:22'!donner: i	| e |	e := contenu at: i.	e isEmpty		ifTrue: [ e error: #Yenaplus ]		ifFalse: [ e pop. ]! !!Bonbons methodsFor: 'as yet unclassified' stamp: 'nguyen 3/15/2019 12:21'!remplir: i avec: c	| p |	p := contenu at: i.	p push: c.	p push: c.	p push: c.	p push: c.	p push: c.! !Bonbons subclass: #Carambar	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'HLIN603'!Account subclass: #InterestAccount	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'HLIN603'!!InterestAccount methodsFor: 'as yet unclassified' stamp: 'Khang 3/22/2019 10:39'!depositInterest: n	solde := solde + n*0.05.! !!InterestAccount methodsFor: 'as yet unclassified' stamp: 'Khang 3/22/2019 10:22'!deposit: somme	super deposit: somme.	self depositInterest: somme.! !Bonbons subclass: #Malabar	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'HLIN603'!Object subclass: #Pile	instanceVariableNames: 'contenu index capacite'	classVariableNames: 'tailleDefaut'	poolDictionaries: ''	category: 'HLIN603'!!Pile methodsFor: 'testing' stamp: 'nguyen 3/15/2019 10:18'!isFull.	^(capacite = index)! !!Pile methodsFor: 'printing' stamp: 'nguyen 3/15/2019 10:32'!printOn: aStream	aStream nextPutAll: 'une Pile, de taille: '.	capacite printOn: aStream.	aStream nextPutAll: ' contenant: '.	index printOn: aStream.	aStream nextPutAll:  'objets : ('.	contenu do: [ :each | each printOn: aStream. aStream space ].	aStream nextPut: $).	aStream nextPut: $..! !!Pile methodsFor: 'removing' stamp: 'nguyen 3/15/2019 12:19'!pop	| retour |	self isEmpty	ifFalse: [ 		contenu at: index put: nil.		contenu at: (index).		index := index - 1.		retour := contenu.		^retour. ]			ifTrue: [ self error: 'Pile Vide' ]! !!Pile methodsFor: 'accessing' stamp: 'nguyen 3/15/2019 11:04'!top 	self isEmpty	ifFalse: [ 		^contenu at: 1		 ]	ifTrue: [ self error: 'Pile vide' ]! !!Pile methodsFor: 'initialization' stamp: 'Anonymous 3/22/2019 08:30'!initialize: taille	index := 0.	capacite := taille.	contenu := Array new: capacite.! !!Pile methodsFor: 'initialization' stamp: 'nguyen 3/15/2019 10:09'!isEmpty 	 ^(index = 0)! !!Pile methodsFor: 'adding' stamp: 'nguyen 3/15/2019 10:38'!push: unobjet	self isFull		ifTrue: [ self error: 'Plein' ]		ifFalse: [ index := index + 1.	contenu at: index put: unobjet. ]		! !Account subclass: #SecureAccount	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'HLIN603'!!SecureAccount methodsFor: 'as yet unclassified' stamp: 'Khang 3/22/2019 10:34'!withdraw: somme	(solde >= somme)	ifTrue: [ solde := solde - somme ]	ifFalse: [ self error: 'La solde nest pas suffisant.' ].	! !TestCase subclass: #TestPile	instanceVariableNames: 'standard pleine vide'	classVariableNames: ''	poolDictionaries: ''	category: 'HLIN603'!!TestPile methodsFor: 'tests' stamp: 'Khang 3/22/2019 09:23'!testEquals	self assert: standard = standard.! !!TestPile methodsFor: 'tests' stamp: 'Khang 3/22/2019 09:24'!testEqual 	| copy |	copy := standard shallowCopy.	"self assert: standard equals: copy."	self assert: true.! !!TestPile methodsFor: 'tests' stamp: 'Khang 3/22/2019 09:00'!testEmpty.	self assert: (pleine isEmpty not).	self assert: (standard isEmpty not).	self assert: (vide isEmpty).! !!TestPile methodsFor: 'tests' stamp: 'Khang 3/22/2019 09:19'!testPop.	standard pop.	pleine pop.	self assert: standard isEmpty.	self assert: pleine isFull not.		! !!TestPile methodsFor: 'tests' stamp: 'Khang 3/22/2019 09:03'!testFull	self assert: (pleine isFull).	self assert: (vide isFull not).	self assert: (standard isFull not).! !!TestPile methodsFor: 'running' stamp: 'Khang 3/22/2019 09:00'!setUp	pleine := Pile new initialize: 3. 	pleine push: 1.	pleine push: 2.	pleine push: 3.	standard := Pile new initialize: 3.	standard push: 1. 	vide := Pile new initialize: 3.! !----End fileIn----!!Account class methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 09:34'!new	self initialize deposit: 0.! !!Account class methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 09:34'!new: val	^super initialize deposit: val. ! !!Bank class methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 09:35'!example	| b |	b := self new initialize.	b add: (SecureAccount new: 200). "pourquoi les parenthèses ?"	b add: InterestAccount new.	b add: (SecureAccount new: 150).	b deposit: 100.	! !!Bank class methodsFor: 'example' stamp: 'Khang 3/29/2019 09:35' prior: 33571621!example	| b |	b := self new initialize.	b add: (SecureAccount new: 200). "pourquoi les parenthèses ?"	b add: InterestAccount new.	b add: (SecureAccount new: 150).	b deposit: 100.	^b! !!Bank class methodsFor: 'example' stamp: 'Khang 3/29/2019 09:35' prior: 33571894!example	| b |	b := self new initialize.	b add: (SecureAccount new: 200). "pourquoi les parenthèses ?"	b add: InterestAccount new.	b add: (SecureAccount new: 150).	b deposit: 100.	^b.! !Object subclass: #Account	instanceVariableNames: 'solde'	classVariableNames: 'soldeDefaut'	poolDictionaries: ''	category: 'HLIN603'!!Account methodsFor: 'initialization' stamp: 'Khang 3/22/2019 09:56'!initialize	solde := 0.		! !!Account methodsFor: 'initialization' stamp: 'Khang 3/22/2019 09:55'!initialize: somme	solde := somme.	! !!Account methodsFor: 'comparing' stamp: 'Khang 3/22/2019 10:32'!= anObject 	"Answer whether the receiver and the argument represent the same 	object. If = is redefined in any subclass, consider also redefining the 	message hash."	"^solde = anObject get" 	^solde = anObject instVarAt: 1. "on acc‚àö¬©de ‚àö‚Ä† la 1er variable de class"! !!Account methodsFor: 'printing' stamp: 'Khang 3/22/2019 10:01'!printOn: aStreamaStream nextPutAll: 'un ' , self class name , ' de solde : ' .solde printOn: aStream.! !!Account methodsFor: 'as yet unclassified' stamp: 'Khang 3/22/2019 10:06'!deposit: somme	solde := solde + somme.	! !!Account methodsFor: 'as yet unclassified' stamp: 'Khang 3/22/2019 10:04'!withdraw: somme	solde := solde - somme.	"(solde >= somme)	ifTrue: [ solde := solde - somme ]	ifFalse: [ self error: 'Le solde nest pas suffisant.' ]."	! !!Account methodsFor: 'actions api' stamp: 'Khang 3/22/2019 10:00'!get 	^(solde).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Account class	instanceVariableNames: ''!!Account class methodsFor: 'instance creation' stamp: 'Khang 3/29/2019 09:34'!new	self initialize deposit: 0.! !!Account class methodsFor: 'instance creation' stamp: 'Khang 3/29/2019 09:34'!new: val	^super initialize deposit: val. ! !Object subclass: #Bank	instanceVariableNames: 'comptes'	classVariableNames: ''	poolDictionaries: ''	category: 'HLIN603'!!Bank methodsFor: 'initialization' stamp: 'Khang 3/22/2019 11:08'!initialize	comptes := OrderedCollection new.	! !!Bank methodsFor: 'as yet unclassified' stamp: 'Khang 3/22/2019 11:11'!deposit: n	comptes do: [ :each | each deposit: n].! !!Bank methodsFor: 'as yet unclassified' stamp: 'Khang 3/22/2019 11:12'!balance	| somme |	somme := 0.	comptes do: [ :each | somme := somme + each get ].	^(somme).		! !!Bank methodsFor: 'printing' stamp: 'Khang 3/22/2019 11:17'!printOn: aStream	| balance |	aStream nextPutAll: 'le Solde des compte : '.	balance := balance.	balance printOn: aStream.  ! !!Bank methodsFor: 'adding' stamp: 'Khang 3/22/2019 11:09'!add: compte	comptes add: compte.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Bank class	instanceVariableNames: ''!!Bank class methodsFor: 'example' stamp: 'Khang 3/29/2019 09:35'!example	| b |	b := self new initialize.	b add: (SecureAccount new: 200). "pourquoi les parenth√®ses ?"	b add: InterestAccount new.	b add: (SecureAccount new: 150).	b deposit: 100.	^b.! !Object subclass: #Bonbons	instanceVariableNames: 'colonne taille contenu'	classVariableNames: ''	poolDictionaries: ''	category: 'HLIN603'!!Bonbons methodsFor: 'as yet unclassified' stamp: 'nguyen 3/15/2019 12:22'!donner: i	| e |	e := contenu at: i.	e isEmpty		ifTrue: [ e error: #Yenaplus ]		ifFalse: [ e pop. ]! !!Bonbons methodsFor: 'as yet unclassified' stamp: 'nguyen 3/15/2019 11:41'!colonnes: c taille: t	| p |	contenu := Array new: c.	p := Pile new. 	p initialize: t.	1 to: c do: [		:i | contenu at: i put: p  	]! !!Bonbons methodsFor: 'as yet unclassified' stamp: 'nguyen 3/15/2019 12:21'!remplir: i avec: c	| p |	p := contenu at: i.	p push: c.	p push: c.	p push: c.	p push: c.	p push: c.! !Bonbons subclass: #Carambar	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'HLIN603'!Account subclass: #InterestAccount	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'HLIN603'!!InterestAccount methodsFor: 'as yet unclassified' stamp: 'Khang 3/22/2019 10:22'!deposit: somme	super deposit: somme.	self depositInterest: somme.! !!InterestAccount methodsFor: 'as yet unclassified' stamp: 'Khang 3/22/2019 10:39'!depositInterest: n	solde := solde + n*0.05.! !Bonbons subclass: #Malabar	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'HLIN603'!Object subclass: #Pile	instanceVariableNames: 'contenu index capacite'	classVariableNames: 'tailleDefaut'	poolDictionaries: ''	category: 'HLIN603'!!Pile methodsFor: 'removing' stamp: 'nguyen 3/15/2019 12:19'!pop	| retour |	self isEmpty	ifFalse: [ 		contenu at: index put: nil.		contenu at: (index).		index := index - 1.		retour := contenu.		^retour. ]			ifTrue: [ self error: 'Pile Vide' ]! !!Pile methodsFor: 'printing' stamp: 'nguyen 3/15/2019 10:32'!printOn: aStream	aStream nextPutAll: 'une Pile, de taille: '.	capacite printOn: aStream.	aStream nextPutAll: ' contenant: '.	index printOn: aStream.	aStream nextPutAll:  'objets : ('.	contenu do: [ :each | each printOn: aStream. aStream space ].	aStream nextPut: $).	aStream nextPut: $..! !!Pile methodsFor: 'initialization' stamp: 'nguyen 3/15/2019 10:09'!isEmpty 	 ^(index = 0)! !!Pile methodsFor: 'initialization' stamp: 'Anonymous 3/22/2019 08:30'!initialize: taille	index := 0.	capacite := taille.	contenu := Array new: capacite.! !!Pile methodsFor: 'testing' stamp: 'nguyen 3/15/2019 10:18'!isFull.	^(capacite = index)! !!Pile methodsFor: 'adding' stamp: 'nguyen 3/15/2019 10:38'!push: unobjet	self isFull		ifTrue: [ self error: 'Plein' ]		ifFalse: [ index := index + 1.	contenu at: index put: unobjet. ]		! !!Pile methodsFor: 'accessing' stamp: 'nguyen 3/15/2019 11:04'!top 	self isEmpty	ifFalse: [ 		^contenu at: 1		 ]	ifTrue: [ self error: 'Pile vide' ]! !Account subclass: #SecureAccount	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'HLIN603'!!SecureAccount methodsFor: 'as yet unclassified' stamp: 'Khang 3/22/2019 10:34'!withdraw: somme	(solde >= somme)	ifTrue: [ solde := solde - somme ]	ifFalse: [ self error: 'La solde nest pas suffisant.' ].	! !TestCase subclass: #TestPile	instanceVariableNames: 'standard pleine vide'	classVariableNames: ''	poolDictionaries: ''	category: 'HLIN603'!!TestPile methodsFor: 'tests' stamp: 'Khang 3/22/2019 09:24'!testEqual 	| copy |	copy := standard shallowCopy.	"self assert: standard equals: copy."	self assert: true.! !!TestPile methodsFor: 'tests' stamp: 'Khang 3/22/2019 09:19'!testPop.	standard pop.	pleine pop.	self assert: standard isEmpty.	self assert: pleine isFull not.		! !!TestPile methodsFor: 'tests' stamp: 'Khang 3/22/2019 09:23'!testEquals	self assert: standard = standard.! !!TestPile methodsFor: 'tests' stamp: 'Khang 3/22/2019 09:00'!testEmpty.	self assert: (pleine isEmpty not).	self assert: (standard isEmpty not).	self assert: (vide isEmpty).! !!TestPile methodsFor: 'tests' stamp: 'Khang 3/22/2019 09:03'!testFull	self assert: (pleine isFull).	self assert: (vide isFull not).	self assert: (standard isFull not).! !!TestPile methodsFor: 'running' stamp: 'Khang 3/22/2019 09:00'!setUp	pleine := Pile new initialize: 3. 	pleine push: 1.	pleine push: 2.	pleine push: 3.	standard := Pile new initialize: 3.	standard push: 1. 	vide := Pile new initialize: 3.! !----End fileIn----!!Account methodsFor: 'initialization' stamp: 'Khang 3/29/2019 09:41' prior: 33572571!initialize	self deposit: 0.		! !!Account methodsFor: 'initialization' stamp: 'Khang 3/29/2019 09:41' prior: 33572672!initialize: somme	self deposit: somme.	! !!Account methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 09:41' prior: 33573318!deposit: somme	self deposit: [solde + somme].	! !!Account methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 09:42' prior: 33580002!deposit: somme	solde := [self get + somme].	! !----SNAPSHOT----2019-03-29T09:43:37.156585+01:00 Pharo 7.0 - 64bit (stable) 2.image priorSource: 100!!Account class methodsFor: 'instance creation' stamp: 'Khang 3/29/2019 09:44' prior: 33573865!new	self new initialize deposit: 0.! !!Account class methodsFor: 'instance creation' stamp: 'Khang 3/29/2019 09:44' prior: 33573980!new: val	^super new initialize deposit: val. ! !!Account class methodsFor: 'instance creation' stamp: 'Khang 3/29/2019 09:47' prior: 33573865!new	self new initialize deposit: 0.! !!Account class methodsFor: 'instance creation' stamp: 'Khang 3/29/2019 09:47' prior: 33573980!new: val	^super new initialize deposit: val. ! !!Bank class methodsFor: 'example' stamp: 'Khang 3/29/2019 09:49' prior: 33575024!example	| b |	b := self new initialize.	b add: (SecureAccount new: 200).	b add: InterestAccount new.	b add: (SecureAccount new: 150).	b deposit: 100.	^b.! !Account class removeSelector: #new!!InterestAccount methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 09:54' prior: 33576443!depositInterest: n	solde := [solde + n*0.05].! !!InterestAccount methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 09:54' prior: 33581240!depositInterest: n	solde := (solde + n*0.05).! !!InterestAccount methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 09:54' prior: 33581389!depositInterest: n	solde := (solde + (n*0.05)).! !!Account class methodsFor: 'instance creation' stamp: 'Khang 3/29/2019 09:55' prior: 33573980!new: val	^super new initialize deposit: val. ! !!InterestAccount methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 09:55' prior: 33581538!depositInterest: n	solde := [solde + (n*0.05)].! !!InterestAccount methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 09:55' prior: 33581834!depositInterest: n	solde := solde + (n*0.05).! !!InterestAccount methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 09:56' prior: 33581985!depositInterest: n	solde := solde + ( n * 0.05).! !!Account methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 09:57' prior: 33580145!deposit: somme	solde := self get + somme.	! !!Account methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 09:57' prior: 33582278!deposit: somme	solde := (self get + somme).	! !!Account methodsFor: 'initialization' stamp: 'Khang 3/29/2019 09:59' prior: 33579744!initialize	solde := 0.		! !!Account methodsFor: 'initialization' stamp: 'Khang 3/29/2019 09:59' prior: 33579866!initialize: somme	solde := somme.	! !----SNAPSHOT----2019-03-29T09:59:38.858519+01:00 Pharo 7.0 - 64bit (stable) 2.image priorSource: 25762!!Account class methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 10:00'!new 	^super new initialize deposit: 0.! !!Bank methodsFor: 'printing' stamp: 'Khang 3/29/2019 10:02' prior: 33574631!printOn: aStream	aStream nextPutAll: 'le Solde des compte : '.	self balance printOn: aStream.  ! !!Pile class methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 10:08'!new: taille 	^super new initialize: taille.! !!Pile class methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 10:08'!new 	^super new initialize.! !!Pile methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 10:09'!initialize 	index := 0.	capacite := tailleDefaut.	contenu := Array new: capacite.! !!Bank methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 10:18'!fees	| solde |	comptes do: [ :each | solde := each get. each deposit: solde * -0.0.5 ].! !!Bank methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 10:18' prior: 33583585!fees	| solde |	comptes do: [ :each | solde := each get. each deposit: solde * -0.0.5].! !!Bank methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 10:19' prior: 33583766!fees	| solde |	comptes do: [		 :each | 		solde := each get. 		each deposit: (solde * -0.05).	].! !!Bank methodsFor: 'as yet unclassified' stamp: 'Khang 3/29/2019 10:24'!min	|compte_min|	compte_min := comptes at: 0.	comptes do: [ 		:each |		(compte_min get > each get)		ifTrue: [ compte_min := each ].	].	^compte_min.! !!Bank methodsFor: 'accessing' stamp: 'Khang 3/29/2019 10:26' prior: 33584123!min	|compte_min|	compte_min := comptes at: 1.	comptes do: [ 		:each |		(compte_min get > each get)		ifTrue: [ compte_min := each ].	].	^compte_min.! !----QUIT----2019-03-29T11:19:32.405007+01:00 Pharo 7.0 - 64bit (stable) 2.image priorSource: 28277!Object subclass: #Person2	instanceVariableNames: 'nom age'	classVariableNames: ''	package: 'TP10'!!Person2 methodsFor: 'as yet unclassified' stamp: 'Anonymous 12/3/2019 11:21'!age	^age! !!Person2 methodsFor: 'as yet unclassified' stamp: 'Anonymous 12/3/2019 11:21'!nom	^nom! !Object subclass: #Person2	instanceVariableNames: 'nom age'	classVariableNames: ''	package: 'TP110'!!Person2 methodsFor: 'as yet unclassified' stamp: 'Anonymous 12/3/2019 11:26'!initialize: unNom	age := 0.	nom := unNom.! !!Person2 methodsFor: 'as yet unclassified' stamp: 'Anonymous 12/3/2019 11:39'!setAge: a 	age := a	! !!Person2 methodsFor: 'as yet unclassified' stamp: 'Anonymous 12/3/2019 11:39'!setNom: n	nom := n! !!Person2 methodsFor: 'initialization' stamp: 'Anonymous 12/3/2019 11:40' prior: 33585090!initialize: unNom 	age := 0.	nom := unNom.! !Person2 subclass: #Mineur2 instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'TP110'!Person2 subclass: #Majeur2 instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'TP110'!!Person2 methodsFor: 'as yet unclassified' stamp: 'Anonymous 12/3/2019 11:43'!Vieillir	age := age + 1/	(age = 18)ifTrue:[Majeur2 adoptInstance: self]! !!Person2 methodsFor: 'as yet unclassified' stamp: 'Anonymous 12/3/2019 11:57'!peutConduire	(age < 18 ) ifTrue:[^false]	ifFalse:[^true]! !!Person2 methodsFor: 'as yet unclassified' stamp: 'Anonymous 12/3/2019 12:01' prior: 33585795!Vieillir	age := age + 1/	(age = 18)ifTrue:[ Majeur2 adoptInstance: self]! !Person2 removeSelector: #setAge:!!Person2 methodsFor: 'metier' stamp: 'Anonymous 12/3/2019 12:06' prior: 33586108!Vieillir	age := age + 1/	(age = 18) ifTrue:[ Majeur2 adoptInstance: self]! !----SNAPSHOT----2019-12-03T12:07:19.790434+01:00 Pharo 7.2.image priorSource: 30086!----SNAPSHOT----2019-12-03T12:09:40.805921+01:00 Pharo 7.3.image priorSource: 31949!